name: Build and push the **latest** build to staging

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Uncomment when secrets are created:
  # az ad sp create-for-rbac --name "myApp" --role contributor --scopes /subscriptions/<SUBSCRIPTION_ID>/resourceGroups/<RESOURCE_GROUP> --sdk-auth
  #
  #  REGISTRY_USERNAME
  #  REGISTRY_PASSWORD
  #
  # Service Principal Authentication - i.e., output of `az ad sp create-for-rbac --sdk-auth`
  #  AZURE_CREDENTIALS

  #push:
  #  branches: [ main ]

env:
  APP_NAME:               demo
  CHART_NAME:             dotnet-api
  REGISTRY_NAME:          my-acr-registry
  CLUSTER_NAME:           my-aks-cluster
  CLUSTER_RESOURCE_GROUP: my-resource-group
  NAMESPACE:              ${{ env.APP_NAME }}-staging

jobs:
  build_push_image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      # Connect to Azure Container Registry (ACR)
      - uses: azure/docker-login@v2
        with:
          login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # Container build and push to a Azure Container Registry (ACR)
      - run: |
          docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ env.RELEASE_VERSION }}
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ env.RELEASE_VERSION }}
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:latest
        working-directory: ./src

      - name: Verify image
        run: docker image ls ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ env.RELEASE_VERSION }} --no-trunc

  deploy:
    runs-on: ubuntu-latest
    needs: build_push_image
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - uses: azure/aks-set-context@v4
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

      - uses: azure/k8s-create-secret@v5
        with:
          container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
          container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
          container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          secret-name: ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}
          arguments: --force true

      - name: Get AKS Credentials
        uses: Azure/aks-set-context@v4
        with:
          resource-group: ${{ env.RESOURCE_GROUP_NAME }}
          cluster-name: ${{ env.AKS_NAME }}

      - name: Install Helm
        uses: Azure/setup-helm@v4

      # https://docs.microsoft.com/en-us/azure/aks/http-application-routing
      - name: Deploy app with Helm to AKS
        run: |
          ./scripts/deploy.sh "${{ env.CHART_NAME }}" "${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}" "${{ env.RELEASE_VERSION }}" \
          --create-namespace --namespace ${{ env.NAMESPACE }} \
          --set ingress.enabled=true \
          --set ingress.annotations."kubernetes\.io/ingress\.class"=addon-http-application-routing \
          --set ingress.annotations".nginx\.ingress\.kubernetes\.io/rewrite-target"=/\$1 \
          --set "ingress.hosts[0].host=${{ env.DNS_NAME }},ingress.hosts[0].paths[0].path=/,ingress.hosts[0].paths[0].pathType=ImplementationSpecific"

      - name: List Helm deployments
        run: helm list -n ${{ env.NAMESPACE }}
